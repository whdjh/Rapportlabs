---
description: 
globs: 
alwaysApply: true
---
# Mobile Optimization & Performance Rules

## üì± **MOBILE-FIRST ARCHITECTURE**

### **Container System**
- **ALWAYS** use `MobileContainer` from [MobileLayoutContainer.tsx](mdc:src/components/MobileLayoutContainer.tsx)
- **ALWAYS** respect 480px max-width constraint
- **ALWAYS** use `ScreenContext` for responsive design
- **NEVER** create components wider than 480px

### **Viewport Management**
```typescript
// ALWAYS use this pattern for viewport handling
const { innerHeight, innerWidth } = useInnerSize()
const [ref, { width }] = useMeasure<HTMLDivElement>()

// ALWAYS provide fallback values
const containerHeight = innerHeight ?? '100vh'
const containerWidth = width ?? 480
```

## üöÄ **PERFORMANCE OPTIMIZATION**

### **React Strict Mode**
- **NEVER** enable React Strict Mode (disabled in [next.config.ts](mdc:next.config.ts))
- **ALWAYS** optimize for game performance
- **ALWAYS** use `React.memo` for expensive components
- **ALWAYS** use `useCallback` for event handlers

### **Rendering Optimization**
```typescript
// ALWAYS use this pattern for game components
const GameElement = React.memo<GameElementProps>(({ position, size }) => {
    const style = useMemo(() => ({
        position: 'absolute' as const,
        left: `${position.x}px`,
        top: `${position.y}px`,
        width: `${size.width}px`,
        height: `${size.height}px`,
    }), [position.x, position.y, size.width, size.height])

    return <div style={style} />
})
```

## üñºÔ∏è **ASSET OPTIMIZATION**

### **Image Loading Strategy**
```typescript
// ALWAYS use this pattern for game images
<img
    src="/apple.png"
    width={METRIC.APPLE_HEIGHT}
    height={METRIC.APPLE_HEIGHT}
    draggable={false}
    loading="eager"  // Critical game assets
    alt="Game element"
/>

// ALWAYS use lazy loading for non-critical images
<img
    src="/background.png"
    loading="lazy"
    draggable={false}
    alt="Game background"
/>
```

### **Asset Compression**
- **MUST** compress background.png (currently 919KB)
- **ALWAYS** use WebP format when possible
- **ALWAYS** implement progressive loading
- **NEVER** load large assets synchronously

## üéÆ **GAME PERFORMANCE**

### **Game Loop Optimization**
```typescript
// ALWAYS use requestAnimationFrame for game loops
useEffect(() => {
    let animationFrameId: number
    let lastTime = 0

    const gameLoop = (currentTime: number) => {
        const deltaTime = currentTime - lastTime
        
        if (deltaTime >= 16.67) { // 60fps target
            // Game logic here
            lastTime = currentTime
        }
        
        animationFrameId = requestAnimationFrame(gameLoop)
    }

    gameLoop(0)

    return () => {
        if (animationFrameId) {
            cancelAnimationFrame(animationFrameId)
        }
    }
}, [dependencies])
```

### **State Management**
```typescript
// ALWAYS batch state updates
const updateGameState = useCallback((updates: Partial<GameState>) => {
    setGameState(prev => ({ ...prev, ...updates }))
}, [])

// ALWAYS use useReducer for complex state
const [gameState, dispatch] = useReducer(gameReducer, initialState)
```

## üì± **MOBILE INTERACTION**

### **Touch Event Handling**
```typescript
// ALWAYS use this pattern for touch events
const handleTouchStart = useCallback((e: TouchEvent) => {
    e.preventDefault()
    e.stopPropagation()
    
    const touch = e.touches[0]
    const rect = e.currentTarget.getBoundingClientRect()
    const x = touch.clientX - rect.left
    const y = touch.clientY - rect.top
    
    // Game logic here
}, [])
```

### **Mobile CSS Optimization**
```css
/* ALWAYS include these mobile optimizations */
* {
    -webkit-tap-highlight-color: transparent;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    user-select: none;
}

/* ALWAYS optimize for touch targets */
button, .touch-target {
    min-height: 44px;
    min-width: 44px;
}
```

## üîã **BATTERY OPTIMIZATION**

### **Animation Performance**
- **ALWAYS** use `transform` and `opacity` for animations
- **NEVER** animate `width`, `height`, or `position`
- **ALWAYS** use `will-change` property sparingly
- **ALWAYS** use `@media (prefers-reduced-motion)` for accessibility

### **Memory Management**
```typescript
// ALWAYS cleanup resources
useEffect(() => {
    const eventListeners: Array<() => void> = []
    
    // Add event listeners
    const cleanup = () => {
        eventListeners.forEach(remove => remove())
    }
    
    return cleanup
}, [])
```

## üìä **PERFORMANCE MONITORING**

### **Frame Rate Monitoring**
```typescript
// ALWAYS monitor frame rate in development
const useFrameRate = () => {
    const [fps, setFps] = useState(0)
    
    useEffect(() => {
        if (process.env.NODE_ENV === 'development') {
            let frameCount = 0
            let lastTime = performance.now()
            
            const measureFPS = () => {
                frameCount++
                const currentTime = performance.now()
                
                if (currentTime - lastTime >= 1000) {
                    setFps(Math.round((frameCount * 1000) / (currentTime - lastTime)))
                    frameCount = 0
                    lastTime = currentTime
                }
                
                requestAnimationFrame(measureFPS)
            }
            
            measureFPS()
        }
    }, [])
    
    return fps
}
```

### **Memory Usage Monitoring**
```typescript
// ALWAYS monitor memory usage in development
const useMemoryUsage = () => {
    const [memoryInfo, setMemoryInfo] = useState<MemoryInfo | null>(null)
    
    useEffect(() => {
        if (process.env.NODE_ENV === 'development' && 'memory' in performance) {
            const updateMemoryInfo = () => {
                setMemoryInfo((performance as any).memory)
            }
            
            const interval = setInterval(updateMemoryInfo, 1000)
            return () => clearInterval(interval)
        }
    }, [])
    
    return memoryInfo
}
```

## üö´ **MOBILE PERFORMANCE ANTI-PATTERNS**

### **Performance Anti-Patterns**
- ‚ùå **NEVER** use `setInterval` for game loops
- ‚ùå **NEVER** create objects in render functions
- ‚ùå **NEVER** use synchronous asset loading
- ‚ùå **NEVER** forget to cleanup event listeners

### **Mobile Anti-Patterns**
- ‚ùå **NEVER** use `position: fixed` (use absolute within container)
- ‚ùå **NEVER** exceed 480px width
- ‚ùå **NEVER** ignore touch target sizes
- ‚ùå **NEVER** use heavy CSS animations

## üì± **RESPONSIVE DESIGN**

### **Breakpoint Strategy**
```css
/* ALWAYS use mobile-first approach */
.container {
    width: 100%;
    max-width: 480px;
    margin: 0 auto;
}

/* ALWAYS test on actual devices */
@media (max-width: 480px) {
    .game-element {
        /* Mobile-specific styles */
    }
}
```

### **Touch-Friendly Design**
- **ALWAYS** use minimum 44px touch targets
- **ALWAYS** provide visual feedback for interactions
- **ALWAYS** implement proper touch event handling
- **NEVER** rely on hover states for mobile

## üéØ **PERFORMANCE TARGETS**

### **Frame Rate Goals**
- **TARGET**: 60fps for smooth gameplay
- **MINIMUM**: 30fps for acceptable performance
- **MONITOR**: Frame drops and stuttering

### **Load Time Goals**
- **TARGET**: < 3 seconds for initial load
- **TARGET**: < 1 second for game start
- **MONITOR**: Asset loading times

### **Memory Usage Goals**
- **TARGET**: < 100MB memory usage
- **MONITOR**: Memory leaks and growth

## üìã **MOBILE PERFORMANCE CHECKLIST**

### **Before Deployment**
- [ ] All images optimized and compressed
- [ ] Frame rate consistently above 30fps
- [ ] Touch targets minimum 44px
- [ ] No memory leaks detected
- [ ] Mobile container properly implemented
- [ ] Touch events properly handled
- [ ] Performance monitoring implemented
- [ ] Battery usage optimized
